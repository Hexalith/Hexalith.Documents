@inherits HexEntitySummaryGrid<DocumentSummaryViewModel>
@using Hexalith.Application.Commands
@using System.Security.Claims
@using Hexalith.Application.Requests
@using Hexalith.Application.Sessions.Services
@using Hexalith.Documents.Commands.Documents
@using Hexalith.Extensions.Helpers
@inject IStringLocalizer<Labels> L
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ICommandService CommandService
@inject IRequestService RequestService
@inject ISessionService SessionService
@inject IToastService ToastService
@inject TimeProvider TimeProvider
<HexEntitySummaryGrid Items="Items"
					  TIdDescription="DocumentSummaryViewModel"
					  ShowDisabledColumn="ShowDisabledColumn"
					  OnDisabledChanged="OnDisabledChanged"
					  EntityDetailsPath="@EntityDetailsPath">
	@if (!HideContainerColumn)
	{
		<PropertyColumn TGridItem="DocumentSummaryViewModel" TProp="string" Property="@(p => p.DocumentContainerId)" Title="@(L[nameof(Labels.Container)])"></PropertyColumn>
	}
	<PropertyColumn TGridItem="DocumentSummaryViewModel" TProp="long" Property="@(p => p.Size)" Title="@(L[nameof(Labels.Size)])"></PropertyColumn>
	<TemplateColumn Style="display: flex; align-items: center;" TGridItem="DocumentSummaryViewModel">
		<DocumentDownloadAnchors DocumentId="@context.Id" OnDocumentLink="OnCreateDocumentLinkAsync" />
	</TemplateColumn>

</HexEntitySummaryGrid>


@code {

	[Parameter]
	public bool HideContainerColumn { get; set; }

	[Parameter]
	[EditorRequired]
	public ClaimsPrincipal? User { get; set; }

	[Parameter]
	public string? DocumentContainerId { get; set; }

	private async Task OnCreateDocumentLinkAsync(string id)
	{
		try
		{
			if (User is null || string.IsNullOrWhiteSpace(User.Identity?.Name))
			{
				return;
			}
			var session = await SessionService.GetAsync(User.Identity.Name, CancellationToken.None);
			var key = UniqueIdHelper.GenerateUniqueStringId();
			await CommandService.SubmitCommandAsync(
				User,
				new AddDocumentAccessKey(
					id,
					new(key, TimeProvider.GetLocalNow().AddDays(90))),
				CancellationToken.None);
			// Create the download URL using the NavigationManager
			var baseUri = NavigationManager.BaseUri;
			var downloadUrl = $"{baseUri}documents/download/{session.PartitionId}/{id}/{key}";

			// Use JSRuntime to copy the URL to clipboard
			await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", downloadUrl);

			ToastService.ShowSuccess(L[nameof(Labels.DownloadLinkCopiedToCliboard)]);
		}
		catch (Exception ex)
		{
			ToastService.ShowError(L[nameof(Labels.DownloadLinkFailed), ex.FullMessage()]);
		}
	}
}
