@page "/Documents/Add/DocumentContainer"
@page "/Documents/DocumentContainer/{Id}"
@using Hexalith.Documents.Requests.DocumentStorages
@using Hexalith.Documents.UI.Components.DocumentStorages
@using Hexalith.UI.Components.Pages
@rendermode InteractiveAuto

<HexEntityDetailsPage AddTitle="@Labels.AddTitle"
EditTitle="@Labels.Title"
EntityId="@Id"
ViewModel="_data"
IndexPath="/Documents/DocumentContainer"
ValidationResult="_validationResult"
OnSave="OnSave"
OnLoadData="OnLoadData">

    @if (_data is not null)
    {

        <FluentGrid Style="width:100%">
            <FluentGridItem md="12">
                <DocumentStorageAutocomplete ReadOnly="@(!CreateMode)" MaximumSelectedOptions="1" @bind-SelectedOptions="_data.DocumentStorage" OnOptionsSearch="OnDocumentStorageSearch"  />
            </FluentGridItem>
            <FluentGridItem md="12">
                <FluentLabel Typo="Typography.PaneHeader">@Labels.Tags</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="6" md="3">
                <FluentTextField Style="width:100%; margin-bottom: 0;" @bind-Value="_newTagKey" Label="@Labels.NewTagKey"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="6" md="3">
                <FluentTextField Style="width:100%; margin-bottom: 0;" @bind-Value="_newTagValue" Label="@Labels.NewTagValue"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="6" md="3" Style="display: flex; align-items: flex-end;">
                <FluentCheckbox Style="margin-bottom: 8px;" @bind-Value="_newTagUnique" Label="@Labels.NewTagUnique"></FluentCheckbox>
            </FluentGridItem>
            <FluentGridItem xs="6" md="3" Style="display: flex; align-items: flex-end;">
                <HexAddButton Style="margin-bottom: 2px;" OnClick="AddTag" />
            </FluentGridItem>
            @foreach (DocumentTag target in _data.Tags)
            {
                <FluentGridItem md="12">
                    <FluentStack Width="100%" Orientation="Orientation.Horizontal" Style="margin: 4px 0;">
                        <FluentTextField Style="width:15%;" Value="@target.Key" Readonly="true"></FluentTextField>
                        <FluentTextField Style="width:50%;" Value="@target.Value" Readonly="true"></FluentTextField>
                        <FluentCheckbox Style="width:15%;" Value="@target.Unique" Readonly="true"></FluentCheckbox>
                        <HexRemoveButton Style="width:15%;" OnClick="@(() =>RemoveTag(target))" />
                    </FluentStack>
                </FluentGridItem>
            }

            <FluentGridItem md="12">
                <HexSaveButton Appearance="Appearance.Accent" Onclick="OnSave" />
            </FluentGridItem>
            <FluentGridItem>
                <HexValidationSummary ValidationResult="_validationResult"></HexValidationSummary>
            </FluentGridItem>
        </FluentGrid>
    }
</HexEntityDetailsPage>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter]
    public string? Id { get; set; }

    private ClaimsPrincipal? _user;
    private DocumentContainerEditViewModel? _data;
    private string? _newTagKey;
    private string? _newTagValue;
    private bool _newTagUnique = false;

    private bool CreateMode => string.IsNullOrWhiteSpace(_data?.Original.Id);

    private ValidationResult? _validationResult;
    private async Task OnLoadData()
    {
        if (_user is null)
        {
            return;
        }
        if (Id is not null)
        {
            _data = await DocumentContainerEditViewModel.CreateAsync(Id, _user, RequestService, CancellationToken.None);
        }
        else
        {
            _data = DocumentContainerEditViewModel.Empty;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            _user = authState.User;
        }
        await base.OnInitializedAsync();
    }
    private async Task OnDocumentStorageSearch(OptionsSearchEventArgs<Option<string>> args)
    {
        if (_user is null)
        {
            return;
        }
        var result = await RequestService.SubmitAsync(_user, new GetDocumentStorageSummaries(0, 100, args.Text), CancellationToken.None);
        if (result.Results is not null)
        {
            args.Items = result.Results.ToOptions(false);
        }
    }
    private async Task<SaveResult> OnSave()
    {
        var result = _data.ValidateSave(_user, (d) =>
        {
            _validationResult = new DocumentContainerEditValidation().Validate(d);
            if (_validationResult.IsValid)
            {
                return true;
            }
            return false;
        });
        if (result.Result == ExecuteSaveResult.Success)
        {
            await _data!.SaveAsync(_user!, CommandService, Id is null, CancellationToken.None);
            if (Id is null)
            {
                _data = DocumentContainerEditViewModel.Empty;
            }
        }
        StateHasChanged();
        return result;
    }



    private void AddTag()
    {
        if (!string.IsNullOrWhiteSpace(_newTagKey))
        {
            _data.Tags.Add(new DocumentTag(_newTagKey, _newTagValue, _newTagUnique));
            _newTagKey = _newTagValue = string.Empty;
            _newTagUnique = false;
            StateHasChanged();
        }
    }
    private void RemoveTag(DocumentTag target)
    {
        _data.Tags.Remove(target);
        StateHasChanged();
    }
}
