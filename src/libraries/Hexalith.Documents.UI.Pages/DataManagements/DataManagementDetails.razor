@page "/Documents/DataManagement/{Id}"
@rendermode InteractiveAuto
<HexEntityDetailsToolbar IndexPath="/Documents/DataManagement" OnRefresh="OnRefreshAsync" />

<FluentStack Orientation="Orientation.Vertical" Style="padding:20px;">
    <FluentLabel Typo="Typography.PageTitle">@string.Format(Labels.Title, Id)</FluentLabel>
    @if (_data is not null)
    {
        <FluentGrid>
            <FluentGridItem xs="12" md="3">
                <HexIdField Disabled="true" Value="_data.Id" />
            </FluentGridItem>
            <FluentGridItem md="12">
                <HexStartDateField Disabled="true" Value="_data.StartedAt.LocalDateTime" />
                <HexStartTimeField Disabled="true" Value="_data.StartedAt.LocalDateTime" />
            </FluentGridItem>
            <FluentGridItem md="12">
                <HexEndDateField Disabled="true" Value="_data.CompletedAt?.LocalDateTime" />
                <HexEndTimeField Disabled="true" Value="_data.CompletedAt?.LocalDateTime" />
            </FluentGridItem>
            <FluentGridItem xs="12" md="12">
                <HexCommentsField @bind-Value="_data.Comments" />
            </FluentGridItem>
            <FluentGridItem md="12">
                <HexSaveButton Appearance="Appearance.Accent" Onclick="OnSave" />
            </FluentGridItem>
        </FluentGrid>
    }
</FluentStack>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter]
    public string? Id { get; set; }

    private ClaimsPrincipal? _user;
    private DataManagementEditViewModel _data = new();

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            if (!authState.User.Identity?.IsAuthenticated == true)
            {
                NavigationManager.NavigateTo(Application.LoginPath);
            }
            _user = authState.User;
        }
        if (_user is null)
        {
            return;
        }
        if (Id is not null)
        {
            var details = await RequestService.SubmitAsync(_user, new GetDataManagementDetails(Id), CancellationToken.None);
            if (details.Result is not null)
            {
                _data = new DataManagementEditViewModel(details.Result);
            }
        }
    }

    private async Task OnSave()
    {
        if (_data is null || _user is null)
        {
            return;
        }
        if (!_data.HasChanges)
        {
            return;
        }
        DataManagementCommand fileTypeCommand;
        if (_data.CommentsChanged)
        {
            fileTypeCommand = new ChangeDataManagementComments(
                        _data.Id!,
                        _data.Comments);
            await CommandService.SubmitCommandAsync(_user, fileTypeCommand, CancellationToken.None);
        }
    }

    private Task OnRefreshAsync()
    {
        return Task.CompletedTask;
    }
}
