@page "/Documents/Add/DocumentStorage"
@page "/Documents/DocumentStorage/{Id}"
@rendermode InteractiveAuto
<HexEntityDetailsToolbar IndexPath="/Documents/DocumentStorage" OnRefresh="OnRefreshAsync" />

<FluentStack Orientation="Orientation.Vertical" Style="padding:20px;">
    @if (Id is null) // Add
    {
        <FluentLabel Typo="Typography.PageTitle">@Labels.AddTitle</FluentLabel>
    }
    else // Edit
    {
        <FluentLabel Typo="Typography.PageTitle">@string.Format(Labels.Title, Id)</FluentLabel>
    }
    @if (_data is not null)
    {
        <FluentGrid Orientation="Orientation.Vertical">
            <FluentGridItem xs="12" md="3">
                <HexIdField Disabled="@(Id is not null)" @bind-Value="_data.Id"></HexIdField>
            </FluentGridItem>
            <FluentGridItem xs="12" md="@(Id is null ? 9 : 6)">
                <HexNameField @bind-Value="_data.Name"></HexNameField>
            </FluentGridItem>
            @if (Id is not null)
            {
                <FluentGridItem xs="12" md="3" Style="display: flex; align-items: flex-end;">
                    <HexDisabledCheckbox Style="margin-bottom: 8px;" @bind-Value="_data.Disabled"></HexDisabledCheckbox>
                </FluentGridItem>
            }
            <FluentGridItem xs="12" md="12">
                <HexCommentsField @bind-Value="_data.Comments" />
            </FluentGridItem>
            <FluentGridItem xs="12" md="12">
                <FluentTextField Style="width:100%;" @bind-Value="_data.ConnectionString" Label="@Labels.ConnectionString" />
            </FluentGridItem>
            <FluentGridItem xs="12" md="12">
                <FluentSelect TOption="Option<string>"
                              Items="_storageTypes"
                              OptionDisabled="@(p => p.Disabled)"
                              OptionSelected="@(p => p.Selected)"
                              OptionText="@(p => p.Text)"
                              OptionValue="@(p => p.Value)"
                              @bind-Value="_data.StorageType"
                              Label="@Labels.StorageType">
                </FluentSelect>
            </FluentGridItem>

            <FluentGridItem md="12">
                <HexSaveButton Appearance="Appearance.Accent" Onclick="OnSave" />
            </FluentGridItem>
            <FluentGridItem>
                <HexValidationSummary ValidationResult="ValidationResult"></HexValidationSummary>
            </FluentGridItem>
        </FluentGrid>
    }
</FluentStack>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter]
    public string? Id { get; set; }

    readonly IEnumerable<Option<string>> _storageTypes = Enum
        .GetValues<DocumentStorageType>()
        .Select(p => new Option<string> { Value = p.ToString(), Text = p.GetDisplayName() });


    private ClaimsPrincipal? _user;
    private DocumentStorageEditViewModel _data = new();

    private ValidationResult? ValidationResult;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            if (!authState.User.Identity?.IsAuthenticated == true)
            {
                NavigationManager.NavigateTo(Application.LoginPath);
            }
            _user = authState.User;
        }
        if (_user is null)
        {
            return;
        }
        if (Id is not null)
        {
            var details = await RequestService.SubmitAsync(_user, new GetDocumentStorageDetails(Id), CancellationToken.None);
            if (details.Result is not null)
            {
                _data = new DocumentStorageEditViewModel(details.Result);
            }
        }
        await base.OnInitializedAsync();
    }

    private async Task OnSave()
    {
        if (_data is null || _user is null)
        {
            return;
        }
        if (!_data.HasChanges)
        {
            return;
        }
        ValidationResult = new DocumentStorageEditValidation().Validate(_data);
        if (!ValidationResult.IsValid)
            return;
        DocumentStorageCommand fileTypeCommand;
        if (Id is null)
        {
            fileTypeCommand = new AddDocumentStorage(
                        _data.Id!,
                        _data.Name,
                        Enum.Parse<DocumentStorageType>(_data.StorageType),
                        _data.Comments,
                        _data.ConnectionString);
            await CommandService.SubmitCommandAsync(_user, fileTypeCommand, CancellationToken.None);
            _data = new();
            StateHasChanged();
            return;
        }
        if (_data.DescriptionChanged)
        {
            fileTypeCommand = new ChangeDocumentStorageDescription(
                        _data.Id!,
                        _data.Name!,
                        _data.Comments);
            await CommandService.SubmitCommandAsync(_user, fileTypeCommand, CancellationToken.None);
        }
        if (_data.Disabled != _data.Original.Disabled && _data.Disabled)
        {
            fileTypeCommand = new DisableDocumentStorage(_data.Id);
            await CommandService.SubmitCommandAsync(_user, fileTypeCommand, CancellationToken.None);
        }
        if (_data.Disabled != _data.Original.Disabled && !_data.Disabled)
        {
            fileTypeCommand = new EnableDocumentStorage(_data.Id);
            await CommandService.SubmitCommandAsync(_user, fileTypeCommand, CancellationToken.None);
        }
        if (Id is null)
        {
            _data = new();
            StateHasChanged();
        }
    }

    private static Task OnRefreshAsync()
    {
        return Task.CompletedTask;
    }
}
