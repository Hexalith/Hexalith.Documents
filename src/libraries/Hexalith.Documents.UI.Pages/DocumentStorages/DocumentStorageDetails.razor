@page "/Documents/Add/DocumentStorage"
@page "/Documents/DocumentStorage/{Id}"
@rendermode InteractiveAuto
<HexEntityDetailsPage AddTitle="@Labels.AddTitle"
                      EditTitle="@Labels.Title"
                      EntityId="@Id"
                      ViewModel="_data"
                      IndexPath="/Documents/DocumentStorage"
                      ValidationResult="_validationResult"
                      OnSave="OnSave"
                      OnLoadData="OnLoadData">

    @if (_data is not null)
    {
        <FluentGrid Style="width:100%;">
            <FluentGridItem xs="12" md="3">
                <HexIdField Disabled="@(Id is not null)" @bind-Value="_data.Id"></HexIdField>
            </FluentGridItem>
            <FluentGridItem xs="12" md="@(Id is null ? 9 : 6)">
                <HexNameField @bind-Value="_data.Name"></HexNameField>
            </FluentGridItem>
            @if (Id is not null)
            {
                <FluentGridItem xs="12" md="3" Style="display: flex; align-items: flex-end;">
                    <HexDisabledCheckbox Style="margin-bottom: 8px;" @bind-Value="_data.Disabled"></HexDisabledCheckbox>
                </FluentGridItem>
            }
            <FluentGridItem xs="12" md="12">
                <HexCommentsField @bind-Value="_data.Comments" />
            </FluentGridItem>
            <FluentGridItem xs="12" md="12">
                <FluentTextField Style="width:100%;" @bind-Value="_data.ConnectionString" Label="@Labels.ConnectionString" />
            </FluentGridItem>
            <FluentGridItem xs="12" md="12">
                <FluentSelect TOption="Option<string>"
                              Items="_storageTypes"
                              OptionDisabled="@(p => p.Disabled)"
                              OptionSelected="@(p => p.Selected)"
                              OptionText="@(p => p.Text)"
                              OptionValue="@(p => p.Value)"
                              @bind-Value="_data.StorageType"
                              Label="@Labels.StorageType">
                </FluentSelect>
            </FluentGridItem>
        </FluentGrid>
    }
</HexEntityDetailsPage>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter]
    public string? Id { get; set; }

    readonly IEnumerable<Option<string>> _storageTypes = Enum
        .GetValues<DocumentStorageType>()
        .Select(p => new Option<string> { Value = p.ToString(), Text = p.GetDisplayName() });


    private ClaimsPrincipal? _user;
    private DocumentStorageEditViewModel? _data;

    private ValidationResult? _validationResult;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            if (!authState.User.Identity?.IsAuthenticated == true)
            {
                NavigationManager.NavigateTo(Application.LoginPath);
            }
            _user = authState.User;
        }
        await base.OnInitializedAsync();
    }
    private async Task OnLoadData()
    {
        if (Id is not null && _user is not null)
        {
            _data = await DocumentStorageEditViewModel.CreateAsync(Id, _user, RequestService, CancellationToken.None);
        }
        else
        {
            _data = new DocumentStorageEditViewModel();
        }
    }
    private async Task<Hexalith.UI.Components.Pages.SaveResult> OnSave()
    {
        if (_data is null || _user is null)
        {
            return new Hexalith.UI.Components.Pages.SaveResult(ExecuteSaveResult.ValidationFailed, "Data or user not initialized.");
		}
        var result = _data.ValidateSave(_user, (d) =>
        {
            _validationResult = new DocumentStorageEditValidation().Validate(d);
            if (_validationResult.IsValid)
            {
                return true;
            }
            return false;
        });
        if (result.Result == ExecuteSaveResult.Success)
        {
            await _data!.SaveAsync(_user!, CommandService, Id is null, CancellationToken.None);
            if (Id is null)
            {
                _data = new();
            }
        }
        StateHasChanged();
        return result;
    }
}
